[
    {
        "id": "0130f48485c198c2",
        "type": "tab",
        "label": "Flow 1",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "38ce10de.7d8c",
        "type": "opcua-compact-server",
        "z": "0130f48485c198c2",
        "port": 54845,
        "endpoint": "",
        "productUri": "",
        "acceptExternalCommands": true,
        "maxAllowedSessionNumber": "10",
        "maxConnectionsPerEndpoint": "10",
        "maxAllowedSubscriptionNumber": "100",
        "alternateHostname": "",
        "name": "",
        "showStatusActivities": false,
        "showErrors": true,
        "allowAnonymous": false,
        "individualCerts": false,
        "isAuditing": false,
        "serverDiscovery": true,
        "users": [],
        "xmlsetsOPCUA": [],
        "publicCertificateFile": "",
        "privateCertificateFile": "",
        "registerServerMethod": "1",
        "discoveryServerEndpointUrl": "opc.tcp://localhost:54845",
        "capabilitiesForMDNS": "",
        "maxNodesPerRead": 1000,
        "maxNodesPerWrite": 1000,
        "maxNodesPerHistoryReadData": 100,
        "maxNodesPerBrowse": 3000,
        "maxBrowseContinuationPoints": "10",
        "maxHistoryContinuationPoints": "10",
        "delayToInit": "1000",
        "delayToClose": "200",
        "serverShutdownTimeout": "100",
        "addressSpaceScript": "function constructAlarmAddressSpace(server, addressSpace, eventObjects, done) {\n    // server = the created node-opcua server\n    // addressSpace = address space of the node-opcua server\n    // eventObjects = add event variables here to hold them in memory from this script\n  \n    // internal sandbox objects are:\n    // node = the compact server node,\n    // coreServer = core compact server object for debug and access to NodeOPCUA\n    // this.sandboxNodeContext = node context node-red\n    // this.sandboxFlowContext = flow context node-red\n    // this.sandboxGlobalContext = global context node-red\n    // this.sandboxEnv = env variables\n    // timeout and interval functions as expected from nodejs\n  \n    const opcua = coreServer.choreCompact.opcua;\n    const LocalizedText = opcua.LocalizedText;\n    const namespace = addressSpace.getOwnNamespace();\n  \n    const Variant = opcua.Variant;\n    const DataType = opcua.DataType;\n    const DataValue = opcua.DataValue;\n  \n    var flexServerInternals = this;\n  \n    //inputs\n    this.sandboxFlowContext.set(\"isoInput1\", 0);\n    this.sandboxFlowContext.set(\"isoInput2\", 0);\n    //oitputs\n    this.sandboxFlowContext.set(\"isoOutput1\", 0);\n\n  \n    coreServer.debugLog(\"init dynamic address space\");\n    const rootFolder = addressSpace.findNode(\"RootFolder\");\n  \n    node.warn(\"construct new address space for OPC UA\");\n  \n    const myDevice = namespace.addFolder(rootFolder.objects, {\"browseName\": \"Plant\"});\n    const ioFolder = namespace.addFolder(myDevice, {\"browseName\": \"Area-1\" });\n    const isoInputs = namespace.addFolder(ioFolder, {\"browseName\": \"Inputs\"});\n    const isoOutputs = namespace.addFolder(ioFolder, {\"browseName\": \"Outputs\"});\n  \n    const gpioDI1 = namespace.addVariable({\n      \"organizedBy\": isoInputs,\n      \"browseName\": \"I1\",\n      \"nodeId\": \"ns=1;s=Isolated_Input1\",\n      \"dataType\": \"Double\",\n      \"value\": {\n        \"get\": function() {\n          return new Variant({\n            \"dataType\": DataType.Double,\n            \"value\": flexServerInternals.sandboxFlowContext.get(\"isoInput1\")\n          });\n        },\n        \"set\": function(variant) {\n          flexServerInternals.sandboxFlowContext.set(\n            \"isoInput1\",\n            parseFloat(variant.value)\n          );\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n  \n    const gpioDI2 = namespace.addVariable({\n      \"organizedBy\": isoInputs,\n      \"browseName\": \"I2\",\n      \"nodeId\": \"ns=1;s=Isolated_Input2\",\n      \"dataType\": \"Double\",\n      \"value\": {\n        \"get\": function() {\n          return new Variant({\n            \"dataType\": DataType.Double,\n            \"value\": flexServerInternals.sandboxFlowContext.get(\"isoInput2\")\n          });\n        },\n        \"set\": function(variant) {\n          flexServerInternals.sandboxFlowContext.set(\n            \"isoInput2\",\n            parseFloat(variant.value)\n          );\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n    \n    const gpioDO1 = namespace.addVariable({\n      \"organizedBy\": isoOutputs,\n      \"browseName\": \"O1\",\n      \"nodeId\": \"ns=1;s=Isolated_Output1\",\n      \"dataType\": \"Double\",\n      \"value\": {\n        \"get\": function() {\n          return new Variant({\n            \"dataType\": DataType.Double,\n            \"value\": flexServerInternals.sandboxFlowContext.get(\"isoOutput1\")\n          });\n        },\n        \"set\": function(variant) {\n          flexServerInternals.sandboxFlowContext.set(\n            \"isoOutput1\",\n            parseFloat(variant.value)\n          );\n          return opcua.StatusCodes.Good;\n        }\n      }\n    });\n\n  //------------------------------------------------------------------------------\n  // Add a view\n  //------------------------------------------------------------------------------\n  const viewDI = namespace.addView({\n    \"organizedBy\": rootFolder.views,\n    \"browseName\": \"RPIW0-Digital-Ins\"\n  });\n\n  const viewDO = namespace.addView({\n    \"organizedBy\": rootFolder.views,\n    \"browseName\": \"RPIW0-Digital-Outs\"\n  });\n\n  viewDI.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": gpioDI1.nodeId\n  });\n\n  viewDI.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": gpioDI2.nodeId\n  });\n\n\n  viewDO.addReference({\n    \"referenceType\": \"Organizes\",\n    \"nodeId\": gpioDO1.nodeId\n  });\n\n  coreServer.debugLog(\"create dynamic address space done\");\n  node.warn(\"construction of new address space for OPC UA done\");\n\n  done();\n}\n  ",
        "x": 140,
        "y": 80,
        "wires": []
    }
]
